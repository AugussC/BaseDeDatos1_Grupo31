Procedimientos Almacenados
Conceptos Fundamentales

Un procedimiento almacenado (stored procedure) es un conjunto de sentencias SQL precompiladas y almacenadas en el servidor de bases de datos. Su propósito es ejecutar tareas específicas —como consultas, actualizaciones o validaciones— de forma controlada y eficiente, evitando la repetición de código y mejorando el rendimiento general del sistema.

En términos simples, un procedimiento almacenado es un bloque de código reutilizable que puede recibir parámetros, ejecutar operaciones y devolver resultados o valores de salida. Constituye una herramienta clave en la administración, optimización y seguridad de las bases de datos.

Los procedimientos almacenados se utilizan ampliamente para:

Automatizar procesos repetitivos.

Aplicar reglas de negocio directamente en la base de datos.

Controlar la integridad de los datos mediante validaciones centralizadas.

Reducir el tráfico entre la aplicación y el servidor.

Mejorar la seguridad al restringir el acceso directo a las tablas.

En su ejecución, el motor de la base de datos procesa el procedimiento una sola vez (compilación inicial) y almacena su plan de ejecución en memoria, lo que agiliza las llamadas posteriores.
Estructura y Sintaxis Básica

La estructura general de un procedimiento almacenado varía según el gestor de base de datos (SQL Server, MySQL, Oracle, PostgreSQL, etc.), pero suele seguir el siguiente formato:
CREATE PROCEDURE nombre_procedimiento
    @param1 tipo_dato [= valor_predeterminado],
    @param2 tipo_dato OUTPUT
AS
BEGIN
    -- Bloque de instrucciones SQL
    DECLARE @variable_local tipo_dato;

    SELECT @variable_local = columna
    FROM tabla
    WHERE condicion;

    UPDATE tabla
    SET campo = @param1
    WHERE otra_condicion;

    RETURN @@ROWCOUNT; -- Valor opcional de retorno
END;

Elementos Principales:

CREATE PROCEDURE / ALTER PROCEDURE: crea o modifica el procedimiento.

Parámetros: pueden ser de entrada (INPUT), salida (OUTPUT) o ambos.

BEGIN…END: delimitan el cuerpo del procedimiento.

RETURN: devuelve un valor numérico opcional que indica el resultado de la ejecución.

Ventajas del Uso de Procedimientos Almacenados

Eficiencia y rendimiento:
Los procedimientos se compilan una sola vez y se almacenan en caché, reduciendo el tiempo de ejecución.

Seguridad:
Permiten limitar el acceso directo a las tablas, de modo que los usuarios solo puedan interactuar a través de procedimientos controlados.

Mantenibilidad:
Centralizan la lógica de negocio en el servidor, lo que simplifica la actualización del código sin necesidad de modificar las aplicaciones cliente.

Reducción del tráfico de red:
En lugar de enviar múltiples comandos SQL desde la aplicación, se invoca un solo procedimiento, minimizando la comunicación entre cliente y servidor.

Reutilización del código:
Los procedimientos pueden ser llamados desde distintas aplicaciones o procesos, fomentando la modularidad.

Tipos de Procedimientos Almacenados

Procedimientos del Usuario:
Definidos por el desarrollador para satisfacer necesidades específicas del sistema.
Ejemplo: registrar ventas, calcular descuentos, generar reportes, etc.

Procedimientos del Sistema:
Incluidos por defecto en el motor de base de datos. Permiten realizar tareas administrativas, como crear tablas, consultar propiedades o modificar configuraciones internas.

Procedimientos Recursivos:
Son aquellos que se llaman a sí mismos dentro de su propio cuerpo. Se utilizan para recorrer estructuras jerárquicas como árboles o listas enlazadas.

Procedimientos Temporales:
Solo existen durante la sesión actual del usuario. Son útiles para operaciones puntuales o de prueba.
Parámetros y Valores de Retorno

Los procedimientos almacenados pueden trabajar con distintos tipos de parámetros:

Entrada (IN): reciben valores al ser invocados.

Salida (OUT): devuelven valores al finalizar.

Entrada/Salida (INOUT): pueden modificarse dentro del procedimiento.

Ejemplo:
CREATE PROCEDURE ObtenerSueldo
    @EmpleadoID INT,
    @Sueldo DECIMAL(10,2) OUTPUT
AS
BEGIN
    SELECT @Sueldo = salario
    FROM Empleados
    WHERE id = @EmpleadoID;
END;
La ejecución sería:
DECLARE @Resultado DECIMAL(10,2);
EXEC ObtenerSueldo 101, @Resultado OUTPUT;
PRINT @Resultado;
